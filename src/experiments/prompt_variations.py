"""
This module provides functions to generate and manage different prompt formulations
for Bayesian consistency experiments. It uses the prompt templates from the
models.prompt_templates module to create multiple variations for:
    - Prior prompts (eliciting baseline probability estimates)
    - Likelihood prompts (eliciting evidence likelihood for each candidate)
    - Posterior prompts (eliciting updated probability estimates after evidence)

Functions:
    - get_all_variations: Generate all variations of a given prompt template function.
    - generate_all_prompt_variations: Generate a dictionary of prompt variations for a given conversation history,
      candidate classes, and evidence.
    - get_random_prompt_variation: Retrieve a random variation from a list of generated prompts.
"""

import random
from models.prompt_templates import (
    generate_prior_prompt,
    generate_likelihood_prompt,
    generate_posterior_prompt,
)


def get_all_variations(prompt_func, history, *args, num_variations=3):
    """
    Generates all prompt variations using a prompt function.

    Args:
        prompt_func (function): A prompt template function that accepts 'history' as its first argument,
                                  followed by additional parameters and an optional 'variation' parameter.
        history (str): The conversation history or context.
        *args: Additional arguments required by the prompt function.
        num_variations (int, optional): Number of variations to generate (default 3).

    Returns:
        list: A list of prompt strings generated by iterating over variation indices.
    """
    variations = []
    for i in range(num_variations):
        prompt = prompt_func(history, *args, variation=i)
        variations.append(prompt)
    return variations


def generate_all_prompt_variations(history: str, candidate1: str, candidate2: str, evidence: str, num_variations=3):
    """
    Generates all prompt variations for prior, likelihood (for each candidate), and posterior prompts.

    Args:
        history (str): The conversation history.
        candidate1 (str): The first candidate class.
        candidate2 (str): The second candidate class.
        evidence (str): The evidence to be used in likelihood and posterior prompts.
        num_variations (int, optional): Number of prompt variations to generate per type.

    Returns:
        dict: A dictionary with keys 'prior', 'likelihood_candidate1', 'likelihood_candidate2', and 'posterior'.
              Each key maps to a list of prompt variations.
    """
    variations = {
        "prior": get_all_variations(generate_prior_prompt, history, candidate1, candidate2,
                                    num_variations=num_variations),
        "likelihood_candidate1": get_all_variations(generate_likelihood_prompt, history, candidate1, evidence,
                                                    num_variations=num_variations),
        "likelihood_candidate2": get_all_variations(generate_likelihood_prompt, history, candidate2, evidence,
                                                    num_variations=num_variations),
        "posterior": get_all_variations(generate_posterior_prompt, history, evidence, candidate1, candidate2,
                                        num_variations=num_variations),
    }
    return variations


def get_random_prompt_variation(prompt_list):
    """
    Returns a random prompt from a list of prompt variations.

    Args:
        prompt_list (list): List of prompt strings.

    Returns:
        str: A randomly selected prompt.
    """
    return random.choice(prompt_list)


if __name__ == "__main__":
    # Example usage:
    test_history = "We've been discussing our favorite authors and literary styles."
    test_candidate1 = "Shakespeare"
    test_candidate2 = "Mark Twain"
    test_evidence = "To thine own self be true."

    all_variations = generate_all_prompt_variations(test_history, test_candidate1, test_candidate2, test_evidence,
                                                    num_variations=3)

    print("Prior Prompt Variations:")
    for prompt in all_variations["prior"]:
        print("-", prompt)

    print("\nLikelihood Prompt Variations for", test_candidate1, ":")
    for prompt in all_variations["likelihood_candidate1"]:
        print("-", prompt)

    print("\nLikelihood Prompt Variations for", test_candidate2, ":")
    for prompt in all_variations["likelihood_candidate2"]:
        print("-", prompt)

    print("\nPosterior Prompt Variations:")
    for prompt in all_variations["posterior"]:
        print("-", prompt)

    # Example: randomly select one variation per prompt type.
    random_prior = get_random_prompt_variation(all_variations["prior"])
    random_likelihood_c1 = get_random_prompt_variation(all_variations["likelihood_candidate1"])
    random_likelihood_c2 = get_random_prompt_variation(all_variations["likelihood_candidate2"])
    random_posterior = get_random_prompt_variation(all_variations["posterior"])

    print("\nRandomly Selected Prompts:")
    print("Prior:", random_prior)
    print("Likelihood (", test_candidate1, "):", random_likelihood_c1)
    print("Likelihood (", test_candidate2, "):", random_likelihood_c2)
    print("Posterior:", random_posterior)
